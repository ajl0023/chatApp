{"version":3,"sources":["socketInstance.js","Join.js","Chat.js","App.js","index.js"],"names":["getSocket","io","SignIn","props","useState","name","setName","room","setRoom","error","setError","history","useHistory","useEffect","on","data","handleRoute","e","key","type","emit","id","resp","push","className","onClick","placeholder","onChange","target","value","onKeyDown","event","preventDefault","Chat","App","socket","setSocket","socketState","path","exact","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"0NACWA,E,MAAYC,KCGR,SAASC,EAAOC,GAAQ,IAAD,EACZC,mBAAS,IADG,mBAC7BC,EAD6B,KACvBC,EADuB,OAEZF,mBAAS,IAFG,mBAE7BG,EAF6B,KAEvBC,EAFuB,OAGRJ,qBAHQ,gCAIVA,oBAAS,IAJC,mBAI7BK,EAJ6B,KAItBC,EAJsB,KAK9BC,EAAUC,cAChBC,qBAAU,WAURb,EAAUc,GAAG,QAAQ,SAACC,GAChBA,EAAKN,OACPC,EAASK,QAGZ,IACH,IAAMC,EAAc,SAACC,GACL,UAAVA,EAAEC,KAA8B,UAAXD,EAAEE,MAEzBnB,EAAUoB,KACR,OACAf,EACAE,EACAP,EAAUqB,IACV,SAACC,GAEKA,EAAKb,OAKPE,EAAQY,KAAR,qBAA2BlB,EAA3B,iBAAwCE,QAYlD,OACE,qBAAKiB,UAAU,eAAf,SACE,sBACEC,QAAS,WACPf,GAAS,IAEXc,UAAU,iBAJZ,UAME,oBAAIA,UAAU,cAAd,kBACA,sBAAKA,UAAU,uBAAf,UACE,8BACE,uBACEA,UAAU,cACVE,YAAY,OACZP,KAAK,OACLQ,SAnBS,SAACV,GACpBX,EAAQW,EAAEW,OAAOC,YAqBX,sBAAKL,UAAU,6BAAf,UACE,uBACEA,UAAU,mBACVM,UAAW,SAACb,GAAD,OAAOD,EAAYC,IAC9BS,YAAY,OACZP,KAAK,OACLQ,SAAU,SAACI,GAAD,OAAWvB,EAAQuB,EAAMH,OAAOC,UAE5C,qBAAKL,UAAYf,EAAD,6BAAhB,SACE,mBAAGe,UAAU,gBAAb,SAA8Bf,EAAMA,gBAM1C,wBACEe,UAAU,kBACVC,QAAS,SAACR,GAAD,OACNZ,GAASE,EAA4BS,EAAYC,GAAjCA,EAAEe,kBAErBb,KAAK,SALP,0BCgRR,IAIec,EAJF,WACX,OAAO,yBC9TMC,EA9BH,WAAO,IAAD,EACgB9B,mBAAS,UADzB,gCAGYA,mBAAS,KAHrB,mBAGT+B,EAHS,KAGDC,EAHC,OAIsBhC,oBAAS,GAJ/B,mBAITiC,EAJS,UAKhBxB,qBAAU,cAAU,CAACwB,IACrB,IAAMrC,EAAY,SAACmC,GACjBC,EAAUD,IAEZ,OACE,eAAC,IAAD,WACG,IACD,cAAC,IAAD,CACEG,KAAK,IACLC,OAAK,EACLC,OAAQ,SAACrC,GAAD,OACN,cAAC,EAAD,aAAMH,UAAWA,EAAWmC,OAAQA,GAAYhC,OAGpD,cAAC,IAAD,CACEmC,KAAK,QACLC,OAAK,EACLC,OAAQ,SAACrC,GAAD,OACN,cAAC,EAAD,aAAOgC,OAAQA,GAAYhC,WC3BrCsC,IAASD,OACP,cAAC,IAAME,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.53675a86.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\nexport let getSocket = io();\r\n// export const getNewSocket = () => {\r\n//   getSocket = io();\r\n// };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport { getNewSocket, getSocket } from \"./socketInstance\";\r\nexport default function SignIn(props) {\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n  const [socket, setSocket] = useState();\r\n  const [error, setError] = useState(false);\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    // getNewSocket();\r\n    // getSocket.on(\"connect\", () => {\r\n      \r\n    // });\r\n    \r\n    // if (!getSocket.id) {\r\n    //   io.connect();\r\n    // }\r\n\r\n    getSocket.on(\"join\", (data) => {\r\n      if (data.error) {\r\n        setError(data);\r\n      }\r\n    });\r\n  }, []);\r\n  const handleRoute = (e) => {\r\n    if (e.key === \"Enter\" || e.type === \"click\") {\r\n      \r\n      getSocket.emit(\r\n        \"join\",\r\n        name,\r\n        room,\r\n        getSocket.id,\r\n        (resp) => {\r\n          \r\n          if (resp.error) {\r\n            \r\n            return;\r\n          } else {\r\n            \r\n            history.push(`/chat?name=${name}&room=${room}`);\r\n          }\r\n        }\r\n      \r\n      );\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n \r\n  return (\r\n    <div className=\"join-wrapper\">\r\n      <div\r\n        onClick={() => {\r\n          setError(false);\r\n        }}\r\n        className=\"join-container\"\r\n      >\r\n        <h1 className=\"join-header\">Join</h1>\r\n        <div className=\"join-input-container\">\r\n          <div>\r\n            <input\r\n              className=\"input-field\"\r\n              placeholder=\"Name\"\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"input-field-room-container\">\r\n            <input\r\n              className=\"input-field-room\"\r\n              onKeyDown={(e) => handleRoute(e)}\r\n              placeholder=\"Room\"\r\n              type=\"text\"\r\n              onChange={(event) => setRoom(event.target.value)}\r\n            />\r\n            <div className={!error ? `inactive` : `error-container`}>\r\n              <p className=\"error-message\">{error.error}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* <Link to={`/chat?name=${name}&room=${room}`} className=\"join-link\"> */}\r\n        <button\r\n          className=\"join-signin-but\"\r\n          onClick={(e) =>\r\n            !name || !room ? e.preventDefault() : handleRoute(e)\r\n          }\r\n          type=\"submit\"\r\n        >\r\n          Sign In\r\n        </button>\r\n        {/* </Link> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// import React, {\r\n//   useState,\r\n//   useEffect,\r\n//   useRef,\r\n//   createRef,\r\n//   useContext,\r\n//   useCallback,\r\n// } from \"react\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import queryString from \"query-string\";\r\n// import io from \"socket.io-client\";\r\n// import Timestamp from \"./Timestamp\";\r\n// import ContentEditable from \"react-contenteditable\";\r\n// import Message from \"./Message\";\r\n// import { v1 as uuid } from \"uuid\";\r\n// import Input from \"./Input\";\r\n// import Users from \"./Users\";\r\n// import { UserContext } from \"./UserContext\";\r\n// import { getSocket } from \"./socketInstance\";\r\n// import Tippy from \"@tippyjs/react\";\r\n\r\n// const Chat = ({ location, socket, disconnect }) => {\r\n//   const [currentUser, setCurrentUser] = useState(\"\");\r\n//   const [, setAllMessages] = useState([]);\r\n//   const [formattedMessages, setFormattedMessages] = useState([]);\r\n//   const [text, setText] = useState(\"\");\r\n//   const [chat, setChat] = useState([]);\r\n//   const [test, setTest] = useState(\"\");\r\n//   const [users, setUsers] = useState([]);\r\n//   const { name, room } = queryString.parse(location.search);\r\n//   const [position, setPosition] = useState({});\r\n//   const [hoveredState, setHoverState] = useState(false);\r\n//   const [hoveredMessage, setHoveredMessage] = useState({});\r\n\r\n//   const scrollToBottom = useRef(null);\r\n\r\n//   const history = useHistory();\r\n//   const scrollContainer = useRef();\r\n//   useEffect(() => {\r\n//     getSocket.emit(\"connectCheck\", room, (data) => {\r\n//       if (!data) {\r\n//         history.push(\"/\");\r\n//       }\r\n//     });\r\n//     window.addEventListener(\"beforeunload\", (e) => {\r\n//       e.preventDefault();\r\n\r\n//       getSocket.emit(\"disconnectUser\", name, room);\r\n//     });\r\n//     return () => {\r\n//       let tooltipContainer = document.getElementById(\"tooltip-container\");\r\n\r\n//       let root = document.getElementById(\"root\");\r\n//       while (tooltipContainer) {\r\n//         root.removeChild(tooltipContainer);\r\n\r\n//         tooltipContainer = document.getElementById(\"tooltip-container\");\r\n//       }\r\n//       getSocket.emit(\"disconnectUser\", name, room);\r\n//     };\r\n//   }, []);\r\n//   useEffect(() => {\r\n//     getSocket.on(\"getUsers\", (data) => {\r\n//       setUsers(data);\r\n//     });\r\n//     getSocket.emit(\"getUsers\", room);\r\n//     getSocket.on(\"getMessages\", (message) => {\r\n//       setChat((messages) => {\r\n//         const messagesCopy = JSON.parse(JSON.stringify(messages));\r\n//         let messageObj = {};\r\n//         let length = messagesCopy.length;\r\n\r\n//         let lastMessageIndex = messagesCopy.length - 1;\r\n//         let prop =\r\n//           messagesCopy[lastMessageIndex] &&\r\n//           Object.getOwnPropertyNames(messagesCopy[lastMessageIndex])[0];\r\n//         if (prop !== \"admin\" && messages.length > 1) {\r\n//           let sentDate = message.sentAt;\r\n\r\n//           let recentDate =\r\n//             messagesCopy[lastMessageIndex][prop][\r\n//               messagesCopy[lastMessageIndex][prop].length - 1\r\n//             ].sentAt;\r\n\r\n//           let oneHour = 3.6 * Math.pow(10, 6);\r\n//           if (sentDate - recentDate >= oneHour) {\r\n//             let sentAtHours = new Date(message.sentAt).getHours();\r\n//             let sentAtMinutes = new Date(message.sentAt).getMinutes();\r\n//             let displayTime = `${\r\n//               sentAtHours === 0\r\n//                 ? 12\r\n//                 : sentAtHours > 12\r\n//                 ? sentAtHours - 12\r\n//                 : sentAtHours\r\n//             }:${sentAtMinutes < 10 ? \"0\" + sentAtMinutes : sentAtMinutes} ${\r\n//               sentAtHours > 12 ? \"PM\" : \"AM\"\r\n//             }`;\r\n\r\n//             messagesCopy.push({\r\n//               admin: [\r\n//                 {\r\n//                   user: \"admin\",\r\n//                   text: displayTime,\r\n//                 },\r\n//               ],\r\n//             });\r\n//             prop = \"admin\";\r\n//           }\r\n//         }\r\n\r\n//         if (lastMessageIndex >= 0 && prop === message.user) {\r\n//           messagesCopy[lastMessageIndex][message.user] = [\r\n//             ...messagesCopy[lastMessageIndex][message.user],\r\n//             message,\r\n//           ];\r\n//         } else {\r\n//           messageObj[message.user] = [message];\r\n//           messagesCopy.push(messageObj);\r\n//         }\r\n\r\n//         messagesCopy.forEach((messages) => {\r\n//           let prop = Object.getOwnPropertyNames(messages)[0];\r\n\r\n//           messages[prop].forEach((message) => {\r\n//             delete message.profile;\r\n//           });\r\n\r\n//           let lastIndex = messages[prop].length - 1;\r\n\r\n//           messages[prop][lastIndex].profile =\r\n//             messages[prop][lastIndex].gradient;\r\n//         });\r\n\r\n//         let toArray = messagesCopy.reduce((arr, message) => {\r\n//           let length = messagesCopy.length;\r\n//           let f = 0;\r\n//           let prop = Object.getOwnPropertyNames(message)[0];\r\n//           for (let i = 0; i < message[prop].length; i++) {\r\n//             arr.push(message[prop][i]);\r\n//           }\r\n//           return arr;\r\n//         }, []);\r\n\r\n//         setFormattedMessages((msg) => {\r\n//           return toArray;\r\n//         });\r\n//         return messagesCopy;\r\n//       });\r\n//     });\r\n//     getSocket.emit(\"initial\", room);\r\n//     let trimmedName = name.trim();\r\n//     setCurrentUser(trimmedName);\r\n//   }, [location.search]);\r\n\r\n//   const getRef = (ref) => {};\r\n//   const handleMouseOut = (e) => {\r\n//     setHoveredMessage(() => {\r\n//       return false;\r\n//     });\r\n//     let tooltipContainer = document.getElementById(\"tooltip-container\");\r\n//     while (tooltipContainer.firstChild) {\r\n//       tooltipContainer.removeChild(tooltipContainer.firstChild);\r\n//     }\r\n//   };\r\n\r\n//   const getPosition = (pos, msg, user, currentUser) => {\r\n//     if (user || (msg && msg.user !== \"admin\")) {\r\n//       setHoveredMessage(() => {\r\n//         return {\r\n//           state: true,\r\n//           message: pos,\r\n//         };\r\n//       });\r\n//       let contentNode = document.createElement(\"p\");\r\n//       let tooltipContainer = document.getElementById(\"tooltip-container\");\r\n\r\n//       if (msg && msg.sentAt && !user) {\r\n//         contentNode.className = \"timestamp-hover-currentUser\";\r\n//         let sentAtHours = new Date(msg.sentAt).getHours();\r\n//         let sentAtMinutes = new Date(msg.sentAt).getMinutes();\r\n\r\n//         contentNode.innerHTML = `${\r\n//           sentAtHours === 0\r\n//             ? 12\r\n//             : sentAtHours > 12\r\n//             ? sentAtHours - 12\r\n//             : sentAtHours\r\n//         }:${sentAtMinutes < 10 ? \"0\" + sentAtMinutes : sentAtMinutes} ${\r\n//           sentAtHours > 12 ? \"PM\" : \"AM\"\r\n//         }`;\r\n//       } else if (user) {\r\n//         contentNode.className = \"hover-user\";\r\n//         contentNode.innerHTML = user;\r\n//       }\r\n//       tooltipContainer.style.position = \"absolute\";\r\n//       tooltipContainer.style.inset = \"0px auto auto 0px\";\r\n//       tooltipContainer.appendChild(contentNode);\r\n//       tooltipContainer.style.display = \"block\";\r\n//       let tooltipSize = tooltipContainer.getBoundingClientRect();\r\n//       let messagePos;\r\n//       if (user) {\r\n//         messagePos = pos.target.getBoundingClientRect();\r\n//       } else {\r\n//         messagePos = pos.target.getBoundingClientRect();\r\n//       }\r\n//       let timestampTop =\r\n//         messagePos.y + messagePos.height / 2 - tooltipSize.height / 2;\r\n//       tooltipContainer.style.transform = `translate(${`${\r\n//         currentUser\r\n//           ? messagePos.right\r\n//           : messagePos.left - tooltipContainer.getBoundingClientRect().width\r\n//       }px`},${`${timestampTop}px`})`;\r\n//     }\r\n//   };\r\n//   const handleScroll = () => {\r\n//     let tooltipContainer = document.getElementById(\"tooltip-container\");\r\n\r\n//     setHoveredMessage((state) => {\r\n//       if (state.state) {\r\n//         let messagePos = state.message.target.getBoundingClientRect();\r\n//         let tooltipSize = tooltipContainer.getBoundingClientRect();\r\n//         let timestampTop =\r\n//           messagePos.y + messagePos.height / 2 - tooltipSize.height / 2;\r\n\r\n//         tooltipContainer.style.transform = `translate(${`${messagePos.right}px`},${`${timestampTop}px`})`;\r\n//         tooltipContainer.style.display = \"block\";\r\n//       }\r\n//       return state;\r\n//     });\r\n//   };\r\n//   const handleResize = (e) => {\r\n//     let tooltipContainer = document.getElementById(\"tooltip-container\");\r\n\r\n//     setHoveredMessage((state) => {\r\n//       if (state.state) {\r\n//         let messagePos = state.message.target.getBoundingClientRect();\r\n//         let tooltipSize = tooltipContainer.getBoundingClientRect();\r\n//         let timestampTop =\r\n//           messagePos.y + messagePos.height / 2 - tooltipSize.height / 2;\r\n\r\n//         tooltipContainer.style.transform = `translate(${`${messagePos.right}px`},${`${timestampTop}px`})`;\r\n//         tooltipContainer.style.display = \"block\";\r\n//       }\r\n//       return state;\r\n//     });\r\n//   };\r\n//   useEffect(() => {\r\n//     window.addEventListener(\"resize\", handleResize);\r\n//     let tooltip = document.createElement(\"div\");\r\n//     tooltip.setAttribute(\"id\", \"tooltip-container\");\r\n\r\n//     document.getElementById(\"root\").appendChild(tooltip);\r\n//     return () => {\r\n//       window.removeEventListener(\"resize\", handleResize);\r\n//     };\r\n//   }, []);\r\n//   const handleChange = (e) => {\r\n//     setText(e.target.innerText);\r\n//   };\r\n//   const handleSubmit = (e, ref) => {\r\n//     // if (e.key === \"Enter\") {\r\n//     //   let target = e.target.innerText.trim();\r\n//     //   if (target.length === 0) {\r\n//     //     e.preventDefault();\r\n//     //   } else {\r\n//     //     getSocket.emit(\"getMessages\", e.target.value);\r\n//     //   }\r\n//     // }\r\n\r\n//     if (e.key === \"Enter\" || e.type === \"click\") {\r\n//       let target = ref.current.innerText.trim();\r\n\r\n//       getSocket.emit(\"getMessages\", name, room, target);\r\n//     }\r\n//   };\r\n\r\n//   const timeStampFunc = (pos, msg) => {\r\n//     setHoverState(true);\r\n//     setPosition(pos);\r\n//     setHoveredMessage(msg);\r\n//   };\r\n//   const checkHoverState = (state) => {\r\n//     setHoverState(state);\r\n//   };\r\n\r\n//   const divRef = useRef(null);\r\n\r\n//   let timeofLast = chat[chat.length - 1];\r\n//   let displayTime;\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"chat-wrapper\">\r\n//         <div className=\"scrollRef-wrapper\">\r\n//           <div className=\"chat-message-container\">\r\n//             <div className=\"userbar-container\">\r\n//               {users.map((user) => {\r\n//                 return (\r\n//                   <Users\r\n//                     handleMouseOut={handleMouseOut}\r\n//                     getPosition={getPosition}\r\n//                     currentUser={currentUser}\r\n//                     users={user}\r\n//                   />\r\n//                 );\r\n//               })}\r\n//             </div>\r\n//             <div className=\"container-2\">\r\n//               <p className=\"chat-header\">{room}</p>\r\n//               <div\r\n//                 onScroll={handleScroll}\r\n//                 ref={scrollContainer}\r\n//                 id=\"msg-box\"\r\n//                 className=\"chat-message-box\"\r\n//               >\r\n//                 <UserContext.Provider value={users}>\r\n//                   <div ref={divRef} className=\"chat-box-container\">\r\n//                     {formattedMessages.map((msg, i) => {\r\n//                       return (\r\n//                         <Message\r\n//                           getRef={getRef}\r\n//                           key={i}\r\n//                           getPosition={getPosition}\r\n//                           handleMouseOut={handleMouseOut}\r\n//                           checkHoverState={checkHoverState}\r\n//                           timeStampFunc={timeStampFunc}\r\n//                           displayTime={displayTime}\r\n//                           currentUser={currentUser}\r\n//                           location={location}\r\n//                           msg={msg}\r\n//                         />\r\n//                       );\r\n//                     })}\r\n//                     <div\r\n//                       id=\"bottom\"\r\n//                       className=\"bottom-of-div\"\r\n//                       ref={scrollToBottom}\r\n//                     ></div>\r\n//                   </div>\r\n//                 </UserContext.Provider>\r\n//               </div>\r\n//               <div></div>\r\n//               <Input\r\n//                 value={text}\r\n//                 handleSubmit={handleSubmit}\r\n//                 handleChange={handleChange}\r\n//               />\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Chat;\r\nimport React from \"react\";\r\n\r\nconst Chat = () => {\r\n  return <div></div>;\r\n};\r\n\r\nexport default Chat;\r\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./myApp.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport io from \"socket.io-client\";\n\nimport Join from \"./Join\";\nimport Chat from \"./Chat\";\nimport { UserContext } from \"./UserContext\";\n//change\n\nconst App = () => {\n  const [socketId, setSocketId] = useState(\"online\");\n\n  const [socket, setSocket] = useState([]);\n  const [socketState, setSocketState] = useState(false);\n  useEffect(() => {}, [socketState]);\n  const getSocket = (socket) => {\n    setSocket(socket);\n  };\n  return (\n    <Router>\n      {\" \"}\n      <Route\n        path=\"/\"\n        exact\n        render={(props) => (\n          <Join getSocket={getSocket} socket={socket} {...props} />\n        )}\n      ></Route>\n      <Route\n        path=\"/chat\"\n        exact\n        render={(props) => (\n          <Chat  socket={socket} {...props} />\n        )}\n      ></Route>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}